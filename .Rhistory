corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
install.packages("corrplot")
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Create a dataFrame to save the old dataset
df_old <- df
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close over date
g2<-ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g2)
# Create time series plot for volume over time
ggplot(df, aes(x = date, y = volume)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of Tesla Trading Volume",
x = "Date",
y = "Volume")
# Create a time series plot for 'change_percent' over time('date')
ggplot(df, aes(x = date, y = change_percent)) +
geom_line() +
labs(title = "Time Series Plot of Change Percent",
x = "Date",
y = "Change Percent")
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#salculate the mean of the 'change_percent' column
mean_change_percent <- mean(df$change_percent, na.rm = TRUE)
#fill missing values in the 'change_percent' column with the mean
df$change_percent[is.na(df$change_percent)] <- mean_change_percent
#calculate the mean of the 'avg_vol_20d' column
mean_avg_vol_20d <- mean(df$avg_vol_20d, na.rm = TRUE)
#fill missing values in the 'avg_vol_20d' column with the mean
df$avg_vol_20d[is.na(df$avg_vol_20d)] <- mean_avg_vol_20d
#quickly check the result
head(df)
head(df_old)
head(df)
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
install.packages("corrplot")
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
install.packages("corrplot")
#export the updated tesla dataset as tesla_updated.csv file
write.csv(df, file = "tesla_updated.csv", row.names = FALSE)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close over date
g2<-ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Create a dataFrame to save the old dataset
df_old <- df
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close over date
g2<-ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g2)
# Create time series plot for volume over time
ggplot(df, aes(x = date, y = volume)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of Tesla Trading Volume",
x = "Date",
y = "Volume")
# Create a time series plot for 'change_percent' over time('date')
ggplot(df, aes(x = date, y = change_percent)) +
geom_line() +
labs(title = "Time Series Plot of Change Percent",
x = "Date",
y = "Change Percent")
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
# #We opted for the removal solution over imputation as it appears to be more reasonable.
# #calculate the mean of the 'change_percent' column
# mean_change_percent <- mean(df$change_percent, na.rm = TRUE)
#
# #fill missing values in the 'change_percent' column with the mean
# df$change_percent[is.na(df$change_percent)] <- mean_change_percent
#
# #calculate the mean of the 'avg_vol_20d' column
# mean_avg_vol_20d <- mean(df$avg_vol_20d, na.rm = TRUE)
#
# #fill missing values in the 'avg_vol_20d' column with the mean
# df$avg_vol_20d[is.na(df$avg_vol_20d)] <- mean_avg_vol_20d
#
# #quickly check the result
# head(df)
#We opted for the removal solution over imputation as it appears to be more reasonable.
# Remove rows with NA values in 'change_percent' or 'avg_vol_20d' columns
df <- df[complete.cases(df[c("change_percent", "avg_vol_20d")]), ]
# Quick check of the resulting dataframe
head(df)
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
head(df_old)
head(df)
#export the updated tesla dataset as tesla_updated.csv file
write.csv(df, file = "tesla_updated.csv", row.names = FALSE)
install.packages("corrplot")
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after August 31, 2020
df_before <- df[df$date < as.Date("2020-08-31"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-08-31"), "change_percent"]
#perform the paired t-test
t_test_result <- t.test(df_before, df_after, paired = TRUE)
# Load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
# Convert 'date' column to Date format
df$date <- as.Date(df$date)
# Split the dataset into two groups: before and after August 31, 2020
df_before <- df[df$date < as.Date("2020-08-31"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-08-31"), "change_percent"]
# Ensure both groups have the same length by selecting a random sample
set.seed(123)  # for reproducibility
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
# Load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
# Convert 'date' column to Date format
df$date <- as.Date(df$date)
# Split the dataset into two groups: before and after August 31, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
# Ensure both groups have the same length by selecting a random sample
set.seed(123)  # for reproducibility
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert 'date' column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
# Ensure both groups have the same length by selecting a random sample
#set.seed(123)
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert 'date' column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#ensure both groups have the same length by selecting a random sample
#set.seed(123)
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
#load the updated Tesla dataset
df <- read.csv("tesla_updated.csv")
#convert date column to Date format
df$date <- as.Date(df$date)
#split the dataset into two groups: before and after March 11, 2020
df_before <- df[df$date < as.Date("2020-03-11"), "change_percent"]
df_after <- df[df$date >= as.Date("2020-03-11"), "change_percent"]
#select a random sample to ensure both groups have the same size
sample_size <- min(length(df_before), length(df_after))
df_before_sample <- sample(df_before, size = sample_size)
df_after_sample <- sample(df_after, size = sample_size)
#perform the paired t-test with the same size samples
t_test_result <- t.test(df_before_sample, df_after_sample, paired = TRUE)
#check the results
t_test_result
