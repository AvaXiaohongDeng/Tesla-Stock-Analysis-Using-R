library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "raw_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "raw_close")] * 15
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "raw_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "raw_close")] * 15
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "raw_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "raw_close")] / 15
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] / 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
# Filter dataset for specific dates
date_2020_08_28 <- df[df$date == as.Date("2020-08-28"), ]
date_2020_08_31 <- df[df$date == as.Date("2020-08-31"), ]
date_2022_08_24 <- df[df$date == as.Date("2022-08-24"), ]
date_2022_08_25 <- df[df$date == as.Date("2022-08-25"), ]
# Display the datasets
print("Dataset for 2020-08-28:")
print(date_2020_08_28)
print("Dataset for 2020-08-31:")
print(date_2020_08_31)
print("Dataset for 2022-08-24:")
print(date_2022_08_24)
print("Dataset for 2022-08-25:")
print(date_2022_08_25)
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Create a dataFrame to save the old dataset
df_old <- df
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close over date
g2<-ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g2)
# Create time series plot for volume over time
ggplot(df, aes(x = date, y = volume)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of Tesla Trading Volume",
x = "Date",
y = "Volume")
# Create a time series plot for 'change_percent' over time('date')
ggplot(df, aes(x = date, y = change_percent)) +
geom_line() +
labs(title = "Time Series Plot of Change Percent",
x = "Date",
y = "Change Percent")
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#salculate the mean of the 'change_percent' column
mean_change_percent <- mean(df$change_percent, na.rm = TRUE)
#fill missing values in the 'change_percent' column with the mean
df$change_percent[is.na(df$change_percent)] <- mean_change_percent
#calculate the mean of the 'avg_vol_20d' column
mean_avg_vol_20d <- mean(df$avg_vol_20d, na.rm = TRUE)
#fill missing values in the 'avg_vol_20d' column with the mean
df$avg_vol_20d[is.na(df$avg_vol_20d)] <- mean_avg_vol_20d
#quickly check the result
head(df)
head(df_old)
head(df)
install.packages("corrplot")
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Create a dataFrame to save the old dataset
df_old <- df
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close over date
g2<-ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g2)
# Create time series plot for volume over time
ggplot(df, aes(x = date, y = volume)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of Tesla Trading Volume",
x = "Date",
y = "Volume")
# Create a time series plot for 'change_percent' over time('date')
ggplot(df, aes(x = date, y = change_percent)) +
geom_line() +
labs(title = "Time Series Plot of Change Percent",
x = "Date",
y = "Change Percent")
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#salculate the mean of the 'change_percent' column
mean_change_percent <- mean(df$change_percent, na.rm = TRUE)
#fill missing values in the 'change_percent' column with the mean
df$change_percent[is.na(df$change_percent)] <- mean_change_percent
#calculate the mean of the 'avg_vol_20d' column
mean_avg_vol_20d <- mean(df$avg_vol_20d, na.rm = TRUE)
#fill missing values in the 'avg_vol_20d' column with the mean
df$avg_vol_20d[is.na(df$avg_vol_20d)] <- mean_avg_vol_20d
#quickly check the result
head(df)
head(df_old)
head(df)
install.packages("corrplot")
#load dataset from the csv file
tesla <- read.csv("tsla_raw_data.csv")
df <- data.frame(tesla)
#check dateframe quickly
head(df)
#generate descriptive statistics including mean, median, mode, quartiles, IQR, data type, etc. using summary function
summary(df)
library(ggplot2)
library(plotly)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close
g <- ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g)
# Create a dataFrame to save the old dataset
df_old <- df
# Convert the "date" column to Date format
df$date <- as.Date(df$date)
# Apply transformations based on date conditions
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] <-
df[df$date < as.Date("2020-08-31"), c("open", "high", "low", "close")] / 15
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] <-
df[df$date < as.Date("2020-08-31"), c("volume", "adjusted_close")] * 15
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("open", "high", "low", "close")] / 3
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] <-
df[df$date >= as.Date("2020-08-31") & df$date < as.Date("2022-08-25"), c("volume", "adjusted_close")] * 3
# Display the transformed dataframe
head(df)
#convert 'date' column to Date format
df$date <- as.Date(df$date)
# Create time series plots for open, high, low, and close over date
g2<-ggplot(df, aes(x = date)) +
geom_line(aes(y = open, color = "Open")) +
geom_line(aes(y = high, color = "High")) +
geom_line(aes(y = low, color = "Low")) +
geom_line(aes(y = close, color = "Close")) +
labs(title = "Time Series Plot of Tesla Stock Prices",
x = "Date",
y = "Price",
color = "Variables") +
scale_color_manual(values = c("Open" = "blue", "High" = "red", "Low" = "green", "Close" = "orange"))
ggplotly(g2)
# Create time series plot for volume over time
ggplot(df, aes(x = date, y = volume)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of Tesla Trading Volume",
x = "Date",
y = "Volume")
# Create a time series plot for 'change_percent' over time('date')
ggplot(df, aes(x = date, y = change_percent)) +
geom_line() +
labs(title = "Time Series Plot of Change Percent",
x = "Date",
y = "Change Percent")
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#salculate the mean of the 'change_percent' column
mean_change_percent <- mean(df$change_percent, na.rm = TRUE)
#fill missing values in the 'change_percent' column with the mean
df$change_percent[is.na(df$change_percent)] <- mean_change_percent
#calculate the mean of the 'avg_vol_20d' column
mean_avg_vol_20d <- mean(df$avg_vol_20d, na.rm = TRUE)
#fill missing values in the 'avg_vol_20d' column with the mean
df$avg_vol_20d[is.na(df$avg_vol_20d)] <- mean_avg_vol_20d
#quickly check the result
head(df)
head(df_old)
head(df)
# Create time series plot for volume over time
ggplot(df, aes(x = date, y = volume)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of Tesla Trading Volume",
x = "Date",
y = "Volume")
# Create a time series plot for 'change_percent' over time('date')
ggplot(df, aes(x = date, y = change_percent)) +
geom_line() +
labs(title = "Time Series Plot of Change Percent",
x = "Date",
y = "Change Percent")
# Loop through each column in the dataframe and create Q-Q plot
for (col in names(df)) {
if (is.numeric(df[[col]])) {
# Create a Q-Q plot for the current column with column name as label
qqnorm(df[[col]], main = paste("Q-Q Plot for", col))
}
}
#remove date column as it's not needed for correlation analysis
df_no_date <- df[,-1]
#calculate correlation matrix showing the correlation between each pair of variables
corr_mat <- round(cor(df_no_date),2)
corr_mat
#using corrplot to show the correlation between each pair of variables
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="square")
#salculate the mean of the 'change_percent' column
mean_change_percent <- mean(df$change_percent, na.rm = TRUE)
#fill missing values in the 'change_percent' column with the mean
df$change_percent[is.na(df$change_percent)] <- mean_change_percent
#calculate the mean of the 'avg_vol_20d' column
mean_avg_vol_20d <- mean(df$avg_vol_20d, na.rm = TRUE)
#fill missing values in the 'avg_vol_20d' column with the mean
df$avg_vol_20d[is.na(df$avg_vol_20d)] <- mean_avg_vol_20d
#quickly check the result
head(df)
head(df_old)
head(df)
